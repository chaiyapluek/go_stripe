{{template "base" .}}

{{define "title"}}
    Bronze PLan
{{end}}

{{define "content"}}
    {{$widget := index .Data "widget"}}
    <h2 class="mt-3 text-center">Bronze Plan</h2>
    <hr>

    <div class="alert alert-danger text-center d-none" id="card-message"></div>

    <form action="/payment-succeeded-temp" method="post" name="charge_form" id="charge_form" autocomplete="off" 
        class="d-block needs-validation charge-form" novalidate="">

        <input type="hidden" name="product_id" value="{{$widget.ID}}"/>
        <input type="hidden" id="amount" name="amount" value="{{$widget.Price}}"/>

        <h3 class="mt-2 text-center">{{formatCurrency $widget.Price}}/month</h3>
        <p class="text-center mb-3">{{$widget.Description}}</p>
        <hr>

        <div class="mb-3">
            <label for="first-name" class="form-label">First Name</label>
            <input type="text" class="form-control" id="first-name" name="first_name" required="" 
                autocomplete="first-name-new">
        </div>

        <div class="mb-3">
            <label for="last-name" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="last-name" name="last_name" required="" 
                autocomplete="last-name-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-email" class="form-label">Email</label>
            <input type="email" class="form-control" id="cardholder-email" name="cardholder_email" required="" 
                autocomplete="cardholder-email-new">
        </div>

        <div class="mb-3">
            <label for="cardholder-name" class="form-label">Name on card</label>
            <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required="" 
                autocomplete="cardholder-name-new">
        </div>

        <!-- Card number will be build by stripe -->
        <div class="mb-3">
            <label for="card-element" class="form-label">Credit Card</label>
            <div id="card-element" class="form-control"></div>
            <div class="alert-danger text-center" id="card-errors" role="alert"></div>
            <div class="alert-success text-center" id="card-success" role="alert"></div>
        </div>

        <hr>

        <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val(event)">Pay {{formatCurrency $widget.Price}}/month</a>
        <div id="processing-payment" class="d-none text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <input type="hidden" name="payment_intent" id="payment_intent">
        <input type="hidden" name="payment_method" id="payment_method">
        <input type="hidden" name="payment_amount" id="payment_amount">
        <input type="hidden" name="payment_currency" id="payment_currency">

    </form>
{{end}}

{{define "js"}}
{{$widget := index .Data "widget"}}
<script src="https://js.stripe.com/v3"></script>
<script>
    let card
    let stripe

    const cardMessage = document.getElementById("card-message")
    const payButton = document.getElementById("pay-button")
    const processing = document.getElementById("processing-payment")

    stripe = Stripe("{{.StripePublishableKey}}")

    function hidePaybutton(){
        payButton.classList.add("d-none")
        processing.classList.remove("d-none")
    }

    function showPayButton(){
        payButton.classList.remove("d-none")
        processing.classList.add("d-none")

    }

    function showCardError(msg){
        cardMessage.classList.add("alert-danger")
        cardMessage.classList.remove("alert-success")
        cardMessage.classList.remove("d-none")
        cardMessage.innerText = msg
    }

    function showCardSuccess(){
        cardMessage.classList.remove("alert-danger")
        cardMessage.classList.add("alert-success")
        cardMessage.classList.remove("d-none")
        cardMessage.innerText = "Transaction successful"
    }

    function val(event){
        let form = document.getElementById("charge_form")

        if(form.checkValidity() === false){
            console.log("falseseee")
            event.preventDefault()
            event.stopPropagation()
            form.classList.add("was-validated")
            return ;
        }
        form.classList.add("was-validated")
        hidePaybutton()

        let amountToCharge = document.getElementById("amount").value

        stripe.createPaymentMethod({
            type: "card",
            card: card,
            billing_details: {
                email: document.getElementById("cardholder-email").value
            }
        })
        .then(stripePaymentMethodHandler)
        .then(result => {
        })
    }

    function stripePaymentMethodHandler(result){
        if(result.error){
            // result is from stripe
            showCardError(result.error.message)
            showPayButton()
        }else{
            // create a customer and subscribe to the plan
            let payload = {
                plan: "{{$widget.PlanID}}",
                payment_method: result.paymentMethod.id,
                email: document.getElementById("cardholder-email").value,
                last_four: result.paymentMethod.card.last4,
            }

            const requestOptions = {
                method: "post",
                header: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload),
            }

            fetch("{{$.API}}/api/create-customer-and-subscribe-to-plan", requestOptions)
            .then(response=>response.json())
            .then(data=>{
                console.log(data)
                processing.classList.add("d-none")
                // set hidden var
                // submit form
            })
        }
    }

    (function(){
        const elements = stripe.elements()
        const style = {
            base:{
                fontSize: "16px",
                lineHeight: "24px",
            },
        }

        // create card entry
        card = elements.create("card", {style: style, hidePostalCode: true})
        card.mount("#card-element")
    
        // check input error
        card.addEventListener("change", (event)=>{
            var displayError = document.getElementById("card-errors")
            if(event.error){
                displayError.classList.remove("d-none")
                showPayButton()
                displayError.textContent = event.error.message
            }else{
                displayError.classList.add("d-none")
                displayError.textContent = ""
            }
        })

    })()
</script>
{{end}}